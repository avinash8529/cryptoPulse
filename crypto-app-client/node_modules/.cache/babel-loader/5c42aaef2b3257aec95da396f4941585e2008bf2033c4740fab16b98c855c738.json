{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { SIZES } from './constants';\nimport { isFunction, warn } from './utils';\nconst INPUT_PROPS_BLACKLIST = [{\n  alt: 'onBlur',\n  prop: 'onBlur'\n}, {\n  alt: 'onInputChange',\n  prop: 'onChange'\n}, {\n  alt: 'onFocus',\n  prop: 'onFocus'\n}, {\n  alt: 'onKeyDown',\n  prop: 'onKeyDown'\n}];\nexport const sizeType = PropTypes.oneOf(SIZES);\nexport function checkPropType(validator, callback) {\n  return (props, propName, componentName) => {\n    PropTypes.checkPropTypes({\n      [propName]: validator\n    }, props, 'prop', componentName);\n    isFunction(callback) && callback(props, propName, componentName);\n  };\n}\nexport function caseSensitiveType(props) {\n  const {\n    caseSensitive,\n    filterBy\n  } = props;\n  warn(!caseSensitive || typeof filterBy !== 'function', 'Your `filterBy` function will override the `caseSensitive` prop.');\n}\nexport function deprecated(validator, reason) {\n  return (props, propName, componentName) => {\n    if (props[propName] != null) {\n      warn(false, `The \\`${propName}\\` prop is deprecated. ${reason}`);\n    }\n    return PropTypes.checkPropTypes({\n      [propName]: validator\n    }, props, 'prop', componentName);\n  };\n}\nexport function defaultInputValueType(props) {\n  const {\n    defaultInputValue,\n    defaultSelected,\n    multiple,\n    selected\n  } = props;\n  const name = defaultSelected.length ? 'defaultSelected' : 'selected';\n  warn(!(!multiple && defaultInputValue && (defaultSelected.length || selected && selected.length)), `\\`defaultInputValue\\` will be overridden by the value from \\`${name}\\`.`);\n}\nexport function defaultSelectedType(props) {\n  const {\n    defaultSelected,\n    multiple\n  } = props;\n  warn(multiple || defaultSelected.length <= 1, 'You are passing multiple options to the `defaultSelected` prop of a ' + 'Typeahead in single-select mode. The selections will be truncated to a ' + 'single selection.');\n}\nexport function highlightOnlyResultType(_ref) {\n  let {\n    allowNew,\n    highlightOnlyResult\n  } = _ref;\n  warn(!(highlightOnlyResult && allowNew), '`highlightOnlyResult` will not work with `allowNew`.');\n}\nexport function ignoreDiacriticsType(props) {\n  const {\n    filterBy,\n    ignoreDiacritics\n  } = props;\n  warn(ignoreDiacritics || typeof filterBy !== 'function', 'Your `filterBy` function will override the `ignoreDiacritics` prop.');\n}\nexport function inputPropsType(_ref2) {\n  let {\n    inputProps\n  } = _ref2;\n  if (!(inputProps && Object.prototype.toString.call(inputProps) === '[object Object]')) {\n    return;\n  }\n  INPUT_PROPS_BLACKLIST.forEach(_ref3 => {\n    let {\n      alt,\n      prop\n    } = _ref3;\n    const msg = alt ? ` Use the top-level \\`${alt}\\` prop instead.` : null;\n    warn(!inputProps[prop], `The \\`${prop}\\` property of \\`inputProps\\` will be ignored.${msg}`);\n  });\n}\nexport function isRequiredForA11y(props, propName, componentName) {\n  warn(props[propName] != null, `The prop \\`${propName}\\` is required to make \\`${componentName}\\` ` + 'accessible for users of assistive technologies such as screen readers.');\n}\nexport function labelKeyType(_ref4) {\n  let {\n    allowNew,\n    labelKey\n  } = _ref4;\n  warn(!(isFunction(labelKey) && allowNew), '`labelKey` must be a string when `allowNew={true}`.');\n}\nexport const optionType = PropTypes.oneOfType([PropTypes.object, PropTypes.string]);\nexport function selectedType(_ref5) {\n  let {\n    multiple,\n    onChange,\n    selected\n  } = _ref5;\n  warn(multiple || !selected || selected.length <= 1, 'You are passing multiple options to the `selected` prop of a Typeahead ' + 'in single-select mode. This may lead to unexpected behaviors or errors.');\n  warn(!selected || selected && isFunction(onChange), 'You provided a `selected` prop without an `onChange` handler. If you ' + 'want the typeahead to be uncontrolled, use `defaultSelected`. ' + 'Otherwise, set `onChange`.');\n}","map":{"version":3,"names":["PropTypes","SIZES","isFunction","warn","INPUT_PROPS_BLACKLIST","alt","prop","sizeType","oneOf","checkPropType","validator","callback","props","propName","componentName","checkPropTypes","caseSensitiveType","caseSensitive","filterBy","deprecated","reason","defaultInputValueType","defaultInputValue","defaultSelected","multiple","selected","name","length","defaultSelectedType","highlightOnlyResultType","_ref","allowNew","highlightOnlyResult","ignoreDiacriticsType","ignoreDiacritics","inputPropsType","_ref2","inputProps","Object","prototype","toString","call","forEach","_ref3","msg","isRequiredForA11y","labelKeyType","_ref4","labelKey","optionType","oneOfType","object","string","selectedType","_ref5","onChange"],"sources":["/home/avinash/projects/project-5/crypto-app/node_modules/react-bootstrap-typeahead/types/propTypes.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { SIZES } from './constants';\nimport { isFunction, warn } from './utils';\nconst INPUT_PROPS_BLACKLIST = [\n    { alt: 'onBlur', prop: 'onBlur' },\n    { alt: 'onInputChange', prop: 'onChange' },\n    { alt: 'onFocus', prop: 'onFocus' },\n    { alt: 'onKeyDown', prop: 'onKeyDown' },\n];\nexport const sizeType = PropTypes.oneOf(SIZES);\nexport function checkPropType(validator, callback) {\n    return (props, propName, componentName) => {\n        PropTypes.checkPropTypes({ [propName]: validator }, props, 'prop', componentName);\n        isFunction(callback) && callback(props, propName, componentName);\n    };\n}\nexport function caseSensitiveType(props) {\n    const { caseSensitive, filterBy } = props;\n    warn(!caseSensitive || typeof filterBy !== 'function', 'Your `filterBy` function will override the `caseSensitive` prop.');\n}\nexport function deprecated(validator, reason) {\n    return (props, propName, componentName) => {\n        if (props[propName] != null) {\n            warn(false, `The \\`${propName}\\` prop is deprecated. ${reason}`);\n        }\n        return PropTypes.checkPropTypes({ [propName]: validator }, props, 'prop', componentName);\n    };\n}\nexport function defaultInputValueType(props) {\n    const { defaultInputValue, defaultSelected, multiple, selected } = props;\n    const name = defaultSelected.length ? 'defaultSelected' : 'selected';\n    warn(!(!multiple &&\n        defaultInputValue &&\n        (defaultSelected.length || (selected && selected.length))), `\\`defaultInputValue\\` will be overridden by the value from \\`${name}\\`.`);\n}\nexport function defaultSelectedType(props) {\n    const { defaultSelected, multiple } = props;\n    warn(multiple || defaultSelected.length <= 1, 'You are passing multiple options to the `defaultSelected` prop of a ' +\n        'Typeahead in single-select mode. The selections will be truncated to a ' +\n        'single selection.');\n}\nexport function highlightOnlyResultType({ allowNew, highlightOnlyResult, }) {\n    warn(!(highlightOnlyResult && allowNew), '`highlightOnlyResult` will not work with `allowNew`.');\n}\nexport function ignoreDiacriticsType(props) {\n    const { filterBy, ignoreDiacritics } = props;\n    warn(ignoreDiacritics || typeof filterBy !== 'function', 'Your `filterBy` function will override the `ignoreDiacritics` prop.');\n}\nexport function inputPropsType({ inputProps }) {\n    if (!(inputProps &&\n        Object.prototype.toString.call(inputProps) === '[object Object]')) {\n        return;\n    }\n    INPUT_PROPS_BLACKLIST.forEach(({ alt, prop }) => {\n        const msg = alt ? ` Use the top-level \\`${alt}\\` prop instead.` : null;\n        warn(!inputProps[prop], `The \\`${prop}\\` property of \\`inputProps\\` will be ignored.${msg}`);\n    });\n}\nexport function isRequiredForA11y(props, propName, componentName) {\n    warn(props[propName] != null, `The prop \\`${propName}\\` is required to make \\`${componentName}\\` ` +\n        'accessible for users of assistive technologies such as screen readers.');\n}\nexport function labelKeyType({ allowNew, labelKey }) {\n    warn(!(isFunction(labelKey) && allowNew), '`labelKey` must be a string when `allowNew={true}`.');\n}\nexport const optionType = PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n]);\nexport function selectedType({ multiple, onChange, selected }) {\n    warn(multiple || !selected || selected.length <= 1, 'You are passing multiple options to the `selected` prop of a Typeahead ' +\n        'in single-select mode. This may lead to unexpected behaviors or errors.');\n    warn(!selected || (selected && isFunction(onChange)), 'You provided a `selected` prop without an `onChange` handler. If you ' +\n        'want the typeahead to be uncontrolled, use `defaultSelected`. ' +\n        'Otherwise, set `onChange`.');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}