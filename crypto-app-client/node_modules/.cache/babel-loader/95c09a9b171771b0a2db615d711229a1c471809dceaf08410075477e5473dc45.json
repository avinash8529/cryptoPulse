{"ast":null,"code":"import invariant from 'invariant';\nimport stripDiacritics from './stripDiacritics';\nconst CASE_INSENSITIVE = 'i';\nconst COMBINING_MARKS = /[\\u0300-\\u036F]/;\nexport function escapeStringRegexp(str) {\n  invariant(typeof str === 'string', '`escapeStringRegexp` expected a string.');\n  return str.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\nexport default function getMatchBounds(subject, str) {\n  const search = new RegExp(escapeStringRegexp(stripDiacritics(str)), CASE_INSENSITIVE);\n  const matches = search.exec(stripDiacritics(subject));\n  if (!matches) {\n    return null;\n  }\n  let start = matches.index;\n  let matchLength = matches[0].length;\n  if (COMBINING_MARKS.test(subject)) {\n    for (let ii = 0; ii <= start; ii++) {\n      if (COMBINING_MARKS.test(subject[ii])) {\n        start += 1;\n      }\n    }\n    for (let ii = start; ii <= start + matchLength; ii++) {\n      if (COMBINING_MARKS.test(subject[ii])) {\n        matchLength += 1;\n      }\n    }\n  }\n  return {\n    end: start + matchLength,\n    start\n  };\n}","map":{"version":3,"names":["invariant","stripDiacritics","CASE_INSENSITIVE","COMBINING_MARKS","escapeStringRegexp","str","replace","getMatchBounds","subject","search","RegExp","matches","exec","start","index","matchLength","length","test","ii","end"],"sources":["/home/avinash/projects/project-5/crypto-app/node_modules/react-bootstrap-typeahead/types/utils/getMatchBounds.js"],"sourcesContent":["import invariant from 'invariant';\nimport stripDiacritics from './stripDiacritics';\nconst CASE_INSENSITIVE = 'i';\nconst COMBINING_MARKS = /[\\u0300-\\u036F]/;\nexport function escapeStringRegexp(str) {\n    invariant(typeof str === 'string', '`escapeStringRegexp` expected a string.');\n    return str.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\nexport default function getMatchBounds(subject, str) {\n    const search = new RegExp(escapeStringRegexp(stripDiacritics(str)), CASE_INSENSITIVE);\n    const matches = search.exec(stripDiacritics(subject));\n    if (!matches) {\n        return null;\n    }\n    let start = matches.index;\n    let matchLength = matches[0].length;\n    if (COMBINING_MARKS.test(subject)) {\n        for (let ii = 0; ii <= start; ii++) {\n            if (COMBINING_MARKS.test(subject[ii])) {\n                start += 1;\n            }\n        }\n        for (let ii = start; ii <= start + matchLength; ii++) {\n            if (COMBINING_MARKS.test(subject[ii])) {\n                matchLength += 1;\n            }\n        }\n    }\n    return {\n        end: start + matchLength,\n        start,\n    };\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,MAAMC,gBAAgB,GAAG,GAAG;AAC5B,MAAMC,eAAe,GAAG,iBAAiB;AACzC,OAAO,SAASC,kBAAkBA,CAACC,GAAG,EAAE;EACpCL,SAAS,CAAC,OAAOK,GAAG,KAAK,QAAQ,EAAE,yCAAyC,CAAC;EAC7E,OAAOA,GAAG,CAACC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;AAC5E;AACA,eAAe,SAASC,cAAcA,CAACC,OAAO,EAAEH,GAAG,EAAE;EACjD,MAAMI,MAAM,GAAG,IAAIC,MAAM,CAACN,kBAAkB,CAACH,eAAe,CAACI,GAAG,CAAC,CAAC,EAAEH,gBAAgB,CAAC;EACrF,MAAMS,OAAO,GAAGF,MAAM,CAACG,IAAI,CAACX,eAAe,CAACO,OAAO,CAAC,CAAC;EACrD,IAAI,CAACG,OAAO,EAAE;IACV,OAAO,IAAI;EACf;EACA,IAAIE,KAAK,GAAGF,OAAO,CAACG,KAAK;EACzB,IAAIC,WAAW,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAACK,MAAM;EACnC,IAAIb,eAAe,CAACc,IAAI,CAACT,OAAO,CAAC,EAAE;IAC/B,KAAK,IAAIU,EAAE,GAAG,CAAC,EAAEA,EAAE,IAAIL,KAAK,EAAEK,EAAE,EAAE,EAAE;MAChC,IAAIf,eAAe,CAACc,IAAI,CAACT,OAAO,CAACU,EAAE,CAAC,CAAC,EAAE;QACnCL,KAAK,IAAI,CAAC;MACd;IACJ;IACA,KAAK,IAAIK,EAAE,GAAGL,KAAK,EAAEK,EAAE,IAAIL,KAAK,GAAGE,WAAW,EAAEG,EAAE,EAAE,EAAE;MAClD,IAAIf,eAAe,CAACc,IAAI,CAACT,OAAO,CAACU,EAAE,CAAC,CAAC,EAAE;QACnCH,WAAW,IAAI,CAAC;MACpB;IACJ;EACJ;EACA,OAAO;IACHI,GAAG,EAAEN,KAAK,GAAGE,WAAW;IACxBF;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}